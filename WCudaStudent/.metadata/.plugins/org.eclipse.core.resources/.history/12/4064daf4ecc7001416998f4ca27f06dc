#ifndef MANDELBROT_MATH_H_
#define MANDELBROT_MATH_H_

#include <math.h>
#include "ColorTools_GPU.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class MandelbrotMath
    {

	/*--------------------------------------*\
	|*		Constructor		*|
	 \*-------------------------------------*/

    public:

	__device__ MandelbrotMath(int _n, int _nMin):n(_n),nMin(_nMin),fact(0.2/n)
	    {
	    }

	/*--------------------------------------*\
	|*		Methodes		*|
	 \*-------------------------------------*/

    public:
	__device__ void colorXY(uchar4* ptrColor, float x, float y, const DomaineMath& domaineMath)
		    {
		    int k = fractal->computeIndiceArret(x, y);

		    if(k <= this->n)
		       {

			float z = k;
			calibreur.calibrer(z);

			float hue01 = z;

			ColorTools::HSB_TO_RVB(hue01, ptrColor); // update color
		       }
		    else
		       {
		       ptrColor->x = 0;
		       ptrColor->y = 0;
		       ptrColor->z = 0;
		       }

		    ptrColor->w = 255; // opaque
		    }




    private:

	/*--------------------------------------*\
	|*		Attributs		*|
	 \*-------------------------------------*/

    private:


	// Inputs
	int n;
	// Tools
	CalibreurI calibreur;

    };

#endif 

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
