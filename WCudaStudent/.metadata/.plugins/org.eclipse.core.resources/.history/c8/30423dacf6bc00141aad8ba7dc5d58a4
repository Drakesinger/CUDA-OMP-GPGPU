#ifndef RIPPLING_MATH_H_
#define RIPPLING_MATH_H_

#include "cudaType.h"
#include "MathTools.h"
#include "math.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * Dans un header only pour preparer la version cuda
 */
class RipplingMath
    {

	/*--------------------------------------*\
	|*		Constructeur		*|
	 \*-------------------------------------*/

    public:

	RipplingMath(unsigned int w, unsigned int h)
	    {
	    this->dim2 = w / 2;
	    }

	virtual ~RipplingMath(void)
	    {
	    //rien
	    }

	/*--------------------------------------*\
	|*		Methode			*|
	 \*-------------------------------------*/

    public:

	void colorIJ(uchar4* ptrColorIJ, int i, int j, float t)
	    {
		float ptrResult;

		dxy(i, j, &ptrResult);

		float color = 128.0f + 127.0f*( (cos((ptrResult/10.0f)-(t/7.0f))) / ((ptrResult/10.0f)+1.0f) );

		ptrColorIJ->x = color;
		ptrColorIJ->y = color;
		ptrColorIJ->z = color;

		ptrColorIJ->w = 255; // opaque*/
	    }

    private:

	void dxy(int i, int j, float* ptrResult) // par exmple
	    {
		float f1 = (i / this->dim2);
		float f2 = (j / this->dim2);

		*ptrResult = sqrt((f1*f1) +(f2*f2));
	    }

    private:

	/*--------------------------------------*\
	|*		Attribut		*|
	 \*-------------------------------------*/

    private:

	// Tools
	double dim2; //=dim/2

    };

#endif

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
