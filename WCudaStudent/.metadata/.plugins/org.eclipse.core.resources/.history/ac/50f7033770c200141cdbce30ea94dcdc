#ifndef MANDELBROTJULIA_MATH_H_
#define MANDELBROTJULIA_MATH_H_

#include "CalibreurF.h"
#include "ColorTools.h"
#include <math.h>
#include "Fractal.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * Dans un header only pour preparer la version cuda
 */
class MandelbrotJuliaMath
    {
	/*--------------------------------------*\
	 |*		Constructeur		*|
	 \*-------------------------------------*/

    public:

	MandelbrotJuliaMath(Fractal* fractal, int n)
	    {
	    this->fractal = fractal;
	    this->n = n;
	    }

	virtual ~MandelbrotJuliaMath(void)
	    {
	    // rien
	    }

	/*--------------------------------------*\
	|*		Methode			*|
	 \*-------------------------------------*/

    public:

	void colorXY(uchar4* ptrColor, float x, float y, const DomaineMath& domaineMath)
	    {
	    int k = fractal->computeIndiceArret(x, y);


	    if (k <= this->n)
		{
		double color = h(k);
		ptrColor->x = 255;
		ptrColor->y = color * 255; // car color varie en 0 et 1
		ptrColor->z = color * 255; // car color varie en 0 et 1
		}
	    else
		{
		ptrColor->x = 0;
		ptrColor->y = 0;
		}

	    ptrColor->z = 0;
	    ptrColor->w = 255; // opaque
	    }

    private:
	double h(int k)
	    {
	    return (1.0 / this->n) * k;
	    }

	/*--------------------------------------*\
	|*		Attribut		*|
	 \*-------------------------------------*/

    protected:

	// Inputs
	int n;
	Fractal *fractal;

	// Tools
	CalibreurF calibreur;
    }
;

#endif

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
