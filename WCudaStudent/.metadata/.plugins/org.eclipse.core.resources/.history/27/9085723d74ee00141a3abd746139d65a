#include "Device.h"
#include <iostream>
#include "MathTools.h"
#include "cudaTools.h"
#include "saucissonSMHost.h"

using std::cout;
using std::endl;

extern __global__ void saucisson(int nbTranches, int tabSize, float* ptrDevPi);

saucissonSMHost::saucissonSMHost(long n)
    {
	this->n = n;

    	this->resultatThe = PI;
    	this->retultatPI = 0;
    	this->ptrDevPI = NULL;

    	this->dg = dim3(16, 1, 1);
	this->db = dim3(16, 1, 1);

	this->sizeOctetPI = sizeof(float);

	HANDLE_ERROR(cudaMalloc(&ptrDevPI, this->sizeOctetPI));
	HANDLE_ERROR(cudaMemset(ptrDevPI,0,this->sizeOctetPI));
    }

saucissonSMHost::~saucissonSMHost()
    {
	HANDLE_ERROR(cudaFree(ptrDevPI));
    }

bool saucissonSMHost::isOk()
    {

    cout << "this->retultatPI: " << this->retultatPI << endl;
    cout << "this->resultatThe: " << this->resultatThe;
    if (this->retultatPI == this->resultatThe)
	{
	    return 1;
	}

    return 0;
    }
/**
 * Override
 */
void saucissonSMHost::process()
    {
    cout << "Je suis dans process" << this->n;
    saucisson<<<this->dg, this->db,this->sizeOctetPI>>>(INT_MAX/100, this->n, this->ptrDevPI);
    HANDLE_ERROR(cudaMemcpy(&retultatPI,this->ptrDevPI, this->sizeOctetPI, cudaMemcpyDeviceToHost));
    }
