#ifndef SRC_CPP_CORE_REDUCTIONTOOLS_H_
#define SRC_CPP_CORE_REDUCTIONTOOLS_H_

#include "cudaTools.h"
#include "Indice1D.h"
 |*			Declaration 					*|

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class ReductionTools
    {

    public:a

	__device__
	static void reduce(float* tabSM, int n, float* ptrDevGM)
	    {
	    reduceIntraBlocks(tabSM, n);
	    reduceInterBlocks(tabSM, n, ptrDevGM);
	    }

    private:
	__device__
	static void reduceIntraBlocks(float* tabSM, int n)
	    {
	    int moitie = n / 2;
	    while (moitie >= 1)
		{
		ecrasement(tabSM, moitie);
		moitie /= 2;
		__syncthreads();
		}
	    }

	__device__
	static void reduceInterBlocks(float* tabSM, int n, float* ptrDevGM)
	    {
	    if (threadIdx.x == 0)
		{
		atomicAdd(ptrDevGM, tabSM[0]);
		}
	    }

	__device__
	static void ecrasement(float* tabSM, int moitie)
	    {
	    const int TID_LOCAL = Indice1D::tidLocalBlock();
	    const int NB_THREADS_BLOCK = Indice1D::nbThreadBlock();

	    int s = TID_LOCAL;

	    while (s < moitie)
		{
		tabSM[s] += tabSM[s + moitie];
		s += NB_THREADS_BLOCK;
		}
	    }
    };

#endif

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
