#include <iostream>

#include "Indice2D.h"
#include "cudaTools.h"
#include "Device.h"

#include "RipplingMath.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void rippling(uchar4* ptrDevPixels, int w, int h, float t);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__global__ void rippling(uchar4* ptrDevPixels, int w, int h, float t)
    {
   // RipplingMath ripplingMath = RipplingMath(w, h);

    RipplingMath ripplingMath(w,h); // ici pour preparer cuda

        const int WH = w * h;

        #pragma omp parallel
        	{
        	const int NB_THREAD = OmpTools::getNbThread(); // dans region parallel

        	const int TID = OmpTools::getTid();
        	int s = TID; // in [0,...

        	int i;
        	int j;
        	while (s < WH)
        	    {
        	    IndiceTools::toIJ(s, w, &i, &j); // s[0,W*H[ --> i[0,H[ j[0,W[

        	    ripplingMath.colorIJ(&ptrTabPixels[s], i, j,t);

        	    s += NB_THREAD;
        	    }
        	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

