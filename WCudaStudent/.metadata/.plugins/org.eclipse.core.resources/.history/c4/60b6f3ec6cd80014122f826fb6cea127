#include <iostream>
#include <assert.h>

#include "HeatTransfert.h"
#include "Device.h"

#include <math.h>
#include <limits>


using std::cout;
using std::endl;
using std::string;

extern __global__ void heatTransfert(uchar4* ptrDevPixels, int w, int h, float dt, float k);

HeatTransfert::HeatTransfert(int w, int h, float dt, float k)
    {
    // Inputs
    this->w = w;
    this->h = h;
    this->t = 0;
    this->dt = dt;
    this->k = k;

    // Tools
    this->dg = dim3(16, 8, 1);
    this->db = dim3(32, 2, 1);

    // Outputs
    this->title = "HeatTransfert";

    //print(dg, db);
    Device::assertDim(dg, db);

    ptrTabHeater = new float[w*h];

    initTab(ptrTabHeater,w,h);

    //Remplissage des 4 zones bleu
    remplir(ptrTabHeater, 179, 179, 195, 195, 0.2,w,h);
    remplir(ptrTabHeater, 605, 179, 621, 195, 0.2,w,h);
    remplir(ptrTabHeater, 179, 605, 195, 621, 0.2,w,h);
    remplir(ptrTabHeater, 605, 605, 621, 621, 0.2,w,h);

    //Zone centrale
    remplir(ptrTabHeater, 300, 300, 500, 500, 1.0,w,h);

    //4 Pixel autour de la zone centrale
    remplir(ptrTabHeater, 400, 295, 401, 296, 0.2,w,h);
    remplir(ptrTabHeater, 295, 400, 296, 401, 0.2,w,h);
    remplir(ptrTabHeater, 400, 505, 401, 506, 0.2,w,h);
    remplir(ptrTabHeater, 505, 400, 506, 401, 0.2,w,h);

    size = w*h*sizeof(float);

    ptrDevTabHeater = NULL;
    ptrDevImgA = NULL;
    ptrDevImgB = NULL;

    HANDLE_ERROR(cudaMalloc(&ptrDevTabHeater,size));
    HANDLE_ERROR(cudaMalloc(&ptrDevImgA,size));
    HANDLE_ERROR(cudaMalloc(&ptrDevImgB,size));

    HANDLE_ERROR(cudaMemset(ptrDevImgA,0,size));
    HANDLE_ERROR(cudaMemset(ptrDevImgB,0,size));


    HANDLE_ERROR(cudaMemcpy(ptrDevTabHeater,ptrTabHeater,size,cudaMemcpyHostToDevice));
    }

HeatTransfert::~HeatTransfert()
    {
    delete[] ptrTabHeater;
    HANDLE_ERROR(cudaFree(ptrDevTabHeater));
    HANDLE_ERROR(cudaFree(ptrDevImgA));
    HANDLE_ERROR(cudaFree(ptrDevImgB));
    }

/*-------------------------*\
 |*     Methode override    *|
 \*-------------------------*/

void HeatTransfert::process(uchar4* ptrDevPixels, int w, int h)
    {
    HANDLE_ERROR(cudaMemcpy(ptrDevPixels,ptrDevTabHeater,size,cudaMemcpyDeviceToDevice));
    heatTransfert<<<dg,db>>>(ptrDevPixels, w, h, dt, k);
    }

void HeatTransfert::initTab(float* ptrTab,int w,int h)
    {
    for(int i=0;i<(w*h);i++)
	{
	ptrTab[i] = 0.0;
	}
    }

void HeatTransfert::remplir(float* ptrTab, int x, int y, int x2, int y2, float value,int w,int h)
    {
    int offset = y*w+x;
    int hauteur = y2-y;
    int largeur = x2-x;
    int i=0;
    while(i<hauteur)
	{
	int j = 0;
	while(j < largeur)
	    {
	    ptrTab[offset+j] = value;
	    j+=1;
	    }
	i+=1;
	offset += w;
	}
    }

float HeatTransfert::getAnimationPara(void)
    {
    return this->t;
    }

void HeatTransfert::animationStep()
    {
    this->t += dt;
    }

 /*--------------*\
 |* get override *|
 \*--------------*/
float HeatTransfert::getT(void)
    {
    return t;
    }

string HeatTransfert::getTitle(void)
    {
    return title;
    }
int HeatTransfert::getW(void)
    {
    return w;
    }
int HeatTransfert::getH(void)
    {
    return h;
    }

float HeatTransfert::randomMinMax(float min, float max)
    {
    return (max-min)*((float)(rand())/(float)RAND_MAX) + min;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
