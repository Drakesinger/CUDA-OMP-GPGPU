#include <iostream>

#include "Indice2D.h"
#include "cudaTools.h"
#include "Device.h"
#include "IndiceTools.h"
#include "DomaineMath.h"

#include "RayTracingMath.h"

using std::cout;
using std::endl;

__global__ void rayTracing(uchar4* ptrDevPixels, int w, int h, Sphere* ptrDevSpheres, DomaineMath domaineMath, const int NB_SPHERE, float t);
__host__ Sphere* instanciateDevSphereGM(Sphere*,int);
__host__ void destructDevSphereGM(Sphere*);
__global__ void rayTracing(uchar4* ptrDevPixels, int w, int h, Sphere* ptrDevSpheres, DomaineMath domaineMath, const int NB_SPHERE, float t)
    {
    RayTracingMath rayTracingMath(ptrDevSpheres,NB_SPHERE);

    int tid = Indice2D::tid();
    int nbThread = Indice2D::nbThread();
    const int MAX = w*h;

    int i,j;
    double x,y;
    int s = tid;
    while(s < MAX)
	{
	IndiceTools::toIJ(s,w,&i,&j);
	domaineMath.toXY(i,j,&x,&y);
	rayTracingMath.workIJ(x, y, t, ptrDevPixels[s]);
	newtonMath.colorXY(x, y, t, &ptrDevPixels[s]);
	s += nbThread;
	}
    }

__host__ Sphere* instanciateDevSphereGM(Sphere* ptrSpheres, int n)
    {
    Sphere* ptrDevSpheres;

    HANDLE_ERROR(cudaMalloc((void**)&ptrDevSpheres, sizeof(Sphere)*n));
    HANDLE_ERROR(cudaMemcpy(ptrDevSpheres, ptrSpheres, sizeof(Sphere)*n, cudaMemcpyHostToDevice));

    return ptrDevSpheres;
    }

__host__ void destructDevSphereGM(Sphere* ptrDevSpheres)
    {
    HANDLE_ERROR(cudaFree(ptrDevSpheres));
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
